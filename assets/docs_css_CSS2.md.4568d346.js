import{_ as s,c as a,o as n,a as e}from"./app.b0eab04b.js";const l='{"title":"CSS","description":"","frontmatter":{},"headers":[{"level":2,"title":"CSS Properties","slug":"css-properties"},{"level":2,"title":"CSS Variable","slug":"css-variable"},{"level":3,"title":"Syntax","slug":"syntax"},{"level":3,"title":"Scopes in CSS Variable","slug":"scopes-in-css-variable"},{"level":2,"title":"Flex 布局","slug":"flex-布局"},{"level":3,"title":"Flex容器","slug":"flex容器"},{"level":3,"title":"Flex item","slug":"flex-item"},{"level":3,"title":"order:定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为 0","slug":"order-定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为-0"},{"level":2,"title":"Grid布局","slug":"grid布局"},{"level":3,"title":"Grid容器","slug":"grid容器"}],"relativePath":"docs/css/CSS2.md"}',p={},t=[e('<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-hidden="true">#</a></h1><h2 id="css-properties" tabindex="-1">CSS Properties <a class="header-anchor" href="#css-properties" aria-hidden="true">#</a></h2><p>::before 选择器向选定的<strong>元素</strong>前插入内容</p><p>hsl() 函数使用色相、饱和度、亮度来定义颜色。</p><p>HSL 即色相、饱和度、亮度（英语：Hue, Saturation, Lightness）。</p><ul><li>**色相（H）**是色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。</li><li>**饱和度（S）**是指色彩的纯度，越高色彩越纯，低则逐渐变灰，取 0-100% 的数值。</li><li><strong>亮度（L）</strong>，取 0-100%，增加亮度，颜色会向白色变化；减少亮度，颜色会向黑色变化。</li></ul><p>HSL 是一种将 RGB 色彩模型中的点在圆柱坐标系中的表示法。这两种表示法试图做到比基于笛卡尔坐标系的几何结构 RGB 更加直观。</p><p>CSS overflow 属性可以控制内容溢出元素框时在对应的元素区间内添加滚动条</p><p><img src="/assets/image-20220511194221503.11e0164f.png" alt=""></p><h2 id="css-variable" tabindex="-1">CSS Variable <a class="header-anchor" href="#css-variable" aria-hidden="true">#</a></h2><h3 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-hidden="true">#</a></h3><h4 id="declaring-a-css-variable" tabindex="-1">Declaring a CSS variable <a class="header-anchor" href="#declaring-a-css-variable" aria-hidden="true">#</a></h4><div class="language-css"><pre><code><span class="line"><span style="color:#A6ACCD;">--variable-name: </span><span style="color:#FFCB6B;">some-value</span><span style="color:#A6ACCD;">;</span></span>\n<span class="line"></span></code></pre></div><h4 id="using-the-css-variable" tabindex="-1">Using the CSS variable <a class="header-anchor" href="#using-the-css-variable" aria-hidden="true">#</a></h4><div class="language-css"><pre><code><span class="line"><span style="color:#FFCB6B;">css-property</span><span style="color:#A6ACCD;">: var(--variable-name);</span></span>\n<span class="line"></span></code></pre></div><h3 id="scopes-in-css-variable" tabindex="-1">Scopes in CSS Variable <a class="header-anchor" href="#scopes-in-css-variable" aria-hidden="true">#</a></h3><h4 id="global-scope" tabindex="-1">Global Scope <a class="header-anchor" href="#global-scope" aria-hidden="true">#</a></h4><div class="language-css"><pre><code><span class="line"><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">root</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --primary-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">000</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#FFCB6B;">h1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">var</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">--primary-color</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h2 id="flex-布局" tabindex="-1">Flex 布局 <a class="header-anchor" href="#flex-布局" aria-hidden="true">#</a></h2><h3 id="flex容器" tabindex="-1">Flex容器 <a class="header-anchor" href="#flex容器" aria-hidden="true">#</a></h3><div class="language-css"><pre><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> flex | inline-flex</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">       //可以有两种取值</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p><img src="/assets/8-block-vs-inline.dd91dd12.png" alt=""></p><p><strong>当设置 flex 布局之后，子元素的 float、clear、vertical-align 的属性将会失效</strong></p><p>flex 容器只对下<strong>一</strong>层生效</p><p>有下面六种属性可以设置在容器上，它们分别是：</p><ol><li>flex-direction</li><li>flex-wrap</li><li>flex-flow（flex-direction 和 flex-wrap 的简写形式）</li><li>justify-content</li><li>align-items</li><li>align-content</li></ol><h4 id="flex-direction-决定主轴的方向-即项目的排列方向" tabindex="-1">flex-direction: 决定主轴的方向(即项目的排列方向) <a class="header-anchor" href="#flex-direction-决定主轴的方向-即项目的排列方向" aria-hidden="true">#</a></h4><div class="language-css"><pre><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">flex-direction</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> row | row-reverse | column | column-reverse</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li>row: 主轴为水平方向</li><li>column：主轴为垂直方向</li></ul><h4 id="flex-wrap-决定容器内项目是否可换行" tabindex="-1">flex-wrap: 决定容器内项目是否可换行 <a class="header-anchor" href="#flex-wrap-决定容器内项目是否可换行" aria-hidden="true">#</a></h4><div class="language-css"><pre><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">flex-wrap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> nowrap | wrap | wrap-reverse</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li>nowrap：默认值，主轴尺寸固定时，当空间不足时，item尺寸会随之调整</li><li>wrap: item主轴总尺寸超出容器时换行</li></ul><h4 id="justify-content：定义了项目在主轴的对齐方式" tabindex="-1">justify-content：定义了项目在主轴的对齐方式 <a class="header-anchor" href="#justify-content：定义了项目在主轴的对齐方式" aria-hidden="true">#</a></h4><div class="language-css"><pre><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">justify-content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> flex-start | flex-end | center | space-between | space-around</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><div class="language-css"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">/* 对齐方式 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: center;     </span><span style="color:#676E95;font-style:italic;">/* 居中排列 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: start;      </span><span style="color:#676E95;font-style:italic;">/* 从行首开始排列 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: end;        </span><span style="color:#676E95;font-style:italic;">/* 从行尾开始排列 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">flex-start</span><span style="color:#A6ACCD;">; </span><span style="color:#676E95;font-style:italic;">/* 从行首起始位置开始排列 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">flex-end</span><span style="color:#A6ACCD;">;   </span><span style="color:#676E95;font-style:italic;">/* 从行尾位置开始排列 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: left;       </span><span style="color:#676E95;font-style:italic;">/* 一个挨一个在对齐容器得左边缘 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: right;      </span><span style="color:#676E95;font-style:italic;">/* 元素以容器右边缘为基准，一个挨着一个对齐, */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">/* 基线对齐 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: baseline;</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: first baseline;</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: last baseline;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">/* 分配弹性元素方式 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">space-between</span><span style="color:#A6ACCD;">;  </span><span style="color:#676E95;font-style:italic;">/* 均匀排列每个元素</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">                                   首个元素放置于起点，末尾元素放置于终点 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">space-around</span><span style="color:#A6ACCD;">;  </span><span style="color:#676E95;font-style:italic;">/* 均匀排列每个元素</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">                                   每个元素周围分配相同的空间 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">space-evenly</span><span style="color:#A6ACCD;">;  </span><span style="color:#676E95;font-style:italic;">/* 均匀排列每个元素</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">                                   每个元素之间的间隔相等 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: stretch;       </span><span style="color:#676E95;font-style:italic;">/* 均匀排列每个元素</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">                                   &#39;auto&#39;-sized 的元素会被拉伸以适应容器的大小 */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">/* 溢出对齐方式 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: safe center;</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: unsafe center;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">/* 全局值 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: inherit;</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: initial;</span></span>\n<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: unset;</span></span>\n<span class="line"></span></code></pre></div><p><img src="/assets/12-justify-content-row.bfe207db.png" alt=""></p><p><img src="/assets/14-space-around-vs-space-evenly.adc5bfd9.jpg" alt=""></p><h4 id="align-items-定义了项目在交叉轴上的对齐方式" tabindex="-1">align-items:定义了项目在交叉轴上的对齐方式 <a class="header-anchor" href="#align-items-定义了项目在交叉轴上的对齐方式" aria-hidden="true">#</a></h4><ul><li>justify-content 定义了项目在主轴的对齐方式</li><li>align-items定义了项目在交叉轴上的对齐方式</li></ul><p><img src="/assets/15-align-items-row.8696b287.png" alt=""></p><p><strong>默认值为 stretch 即如果项目未设置高度或者设为 auto，将占满整个容器的高度</strong></p><h4 id="align-content" tabindex="-1">align-content <a class="header-anchor" href="#align-content" aria-hidden="true">#</a></h4><p>当flex-wrap被设置为wrap时，align-content定义了在交叉轴上的对齐方式</p><p><img src="/assets/18-align-content.2dcf4f39.png" alt=""></p><h3 id="flex-item" tabindex="-1">Flex item <a class="header-anchor" href="#flex-item" aria-hidden="true">#</a></h3><h3 id="order-定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为-0" tabindex="-1">order:定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为 0 <a class="header-anchor" href="#order-定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为-0" aria-hidden="true">#</a></h3><p><img src="/assets/20-order.d4f605f0.png" alt=""></p><h4 id="flex-basis" tabindex="-1">flex-basis <a class="header-anchor" href="#flex-basis" aria-hidden="true">#</a></h4><p>相当于width</p><h4 id="flex-grow" tabindex="-1">flex-grow <a class="header-anchor" href="#flex-grow" aria-hidden="true">#</a></h4><p><img src="/assets/22-flex-grow-calculation.54b68cf9.png" alt=""></p><h4 id="flex-shrink" tabindex="-1">flex-shrink <a class="header-anchor" href="#flex-shrink" aria-hidden="true">#</a></h4><p><img src="/assets/24-flex-shrink-calculation.b548f927.png" alt=""></p><h4 id="align-self" tabindex="-1">align-self <a class="header-anchor" href="#align-self" aria-hidden="true">#</a></h4><p>强制这一个item实现不同的交叉轴对齐方式</p><p><img src="/assets/28-align-self.d609f7a2.png" alt=""></p><h2 id="grid布局" tabindex="-1">Grid布局 <a class="header-anchor" href="#grid布局" aria-hidden="true">#</a></h2><h3 id="grid容器" tabindex="-1">Grid容器 <a class="header-anchor" href="#grid容器" aria-hidden="true">#</a></h3><h4 id="justify-items" tabindex="-1">justify-items <a class="header-anchor" href="#justify-items" aria-hidden="true">#</a></h4><p>沿着行轴线对齐网格项</p><h4 id="align-items" tabindex="-1">align-items <a class="header-anchor" href="#align-items" aria-hidden="true">#</a></h4><p>沿着列轴线对齐网格项</p><h4 id="place-items" tabindex="-1">place-items <a class="header-anchor" href="#place-items" aria-hidden="true">#</a></h4><p><code>place-items</code> 是设置 <code>align-items</code> 和 <code>justify-items</code> 的简写形式</p><ul><li><code>&lt;align-items&gt; &lt;justify-items&gt;</code>：第一个值设置 <code>align-items</code> 属性，第二个值设置 <code>justify-items</code> 属性。如果省略第二个值，则将第一个值同时分配给这两个属性。</li></ul><p>除 Edge 之外的所有主要浏览器都支持 <code>place-items</code> 简写属性</p>',66)];var o=s(p,[["render",function(s,e,l,p,o,i){return n(),a("div",null,t)}]]);export{l as __pageData,o as default};
